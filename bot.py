import telebot
import configparser
import DB.database
import re
import content.TG as tg
from telebot import types
import function
import os
import random


config = configparser.ConfigParser()
config.read("settings.ini")
tokenBot = config["bot"]["bot_token"]


db = DB.database.Database()
bot = telebot.TeleBot(tokenBot)


id_support = '-666276498'  # —Ç—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —á–∞—Ç —Å –≥–ª–∞–≤–Ω—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π


def keyboards_create(ListNameBTN, NumberColumns=2):
    keyboards = types.ReplyKeyboardMarkup(
        row_width=NumberColumns, resize_keyboard=True)
    btn_names = [types.KeyboardButton(text=x) for x in ListNameBTN]
    keyboards.add(*btn_names)
    return keyboards


@bot.message_handler(commands=['start'])
def start(message):
    name = db.check_human(message.chat.id)
    if name is not None:
        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {name[0]}!\n{tg.welcome_message}',
            reply_markup=keyboards_create(tg.welcome_keyboard))
    else:
        bot.send_message(message.chat.id, '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞‚ùó')


@bot.message_handler(func = lambda m : m.text == '‚úîÔ∏è–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è')
def my_achievements(message):
    id = str(message.chat.id)
    ac = DB.database.Achievements()
    rows = ac.received(id)
    ac.close()
    text = ""
    for row in rows:
        if id in row[2]:
            text += f'‚úÖ {row[1]} - {row[3]}' + "\n"
        else:
            text += f'‚ùå {row[1]} - {row[3]}' + "\n"
    bot.send_message(int(id), text)
            

@bot.message_handler(func = lambda m : m.text == 'üìÖ–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π')
def —Åalendar(message):
    kl = DB.database.Callendar()
    event = kl.get_date()
    kl.close()
    btn = ['–ú–µ–Ω—é']
    for i in event:
        btn.append(str(i[0]))
    msg = bot.send_message(message.chat.id, '–î–µ—Ä–∂–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü!\n–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å, \
—á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–æ–±—ã—Ç–∏–∏:', reply_markup=keyboards_create(btn))
    bot.register_next_step_handler(msg, calendarday, btn, event)


def calendarday(message, btn, event):
    if message.text == '–ú–µ–Ω—é':
        start(message)
    elif str(message.text) in btn:
        subscribe = types.InlineKeyboardButton("üîî–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ", callback_data="subscribeivent")
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(subscribe)
        bot.send_message(message.chat.id, f'–°–æ–±—ã—Ç–∏–µ - {event[0][1]} \nüìå{event[0][2]}', reply_markup=keyboard)
        start(message)
    else:
        bot.send_message(message.chat.id, f'–°–æ–±—ã—Ç–∏–π –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç!', reply_markup=types.ReplyKeyboardRemove())
        start(message)

@bot.message_handler(func = lambda m : m.text == 'üìÇ–ù–∞–≤–∏–≥–∞—Ç–æ—Ä')
def navigator(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton(text='–ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', callback_data='Usefulmaterials'),
           types.InlineKeyboardButton(text='–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫', callback_data='phonebook'),
           types.InlineKeyboardButton(text='–ú–µ–Ω—é', callback_data='menu'),)
    bot.send_message(message.chat.id, '–ù–∞–≤–∏–≥–∞—Ç–æ—Ä:', reply_markup=markup)


@bot.message_handler(func = lambda m : m.text == 'üë§–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å')
def askQuestion(message):
    msg = bot.send_message(message.chat.id, '–ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç–∏–º –≤ –±–∏–ª–∂—ç–∞–π—â–µ–µ –≤—Ä–µ–º—è!\n\
–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:')
    bot.register_next_step_handler(msg, send_Question)


def send_Question(message):
    # –ø–æ–¥–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    people = DB.database.People()
    id = message.from_user.id
    name = people.check('name', id)[0]
    subdivision = people.check('subdivision', id)[0]
    department = people.check('department', id)[0]
    people.close()
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–∏–∫–µ—Ç
    tiket = DB.database.Ticket()
    idtiket = tiket.new_tikket(message.text, message.from_user.id)
    tiket.close()
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    ok = types.InlineKeyboardButton("üü•–í–∑—è—Ç—å –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É", callback_data="takeTicket")
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(ok)
    bot.send_message(id_support, f'–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç: {name} \n–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {subdivision}\n–û—Ç–¥–µ–ª :{department}\n–ù–æ–º–µ—Ä:{idtiket}\n–í–æ–ø—Ä–æ—Å: {message.text}',
    reply_markup=keyboard)
    bot.send_message(message.chat.id, '–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞!')

""" –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å """
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    data = call.data
    
    if data == 'takeTicket':
        new_markup = types.InlineKeyboardMarkup()
        new_button = types.InlineKeyboardButton(text='‚úÖ–í–∑—è—Ç–æ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É', callback_data='takeTicket')
        new_markup.add(new_button)
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=new_markup)
    
    elif data == 'Usefulmaterials':
        button = types.InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É", url="https://www.example.com")
        Usefulmaterials = types.InlineKeyboardMarkup()
        Usefulmaterials.add(button)
        bot.send_message(call.message.chat_id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É", reply_markup=Usefulmaterials)
    
    # –¥–æ–ø–∏—Å–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
    elif data == 'subscribeivent':
        new_markup = types.InlineKeyboardMarkup()
        new_button = types.InlineKeyboardButton(text='üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è', callback_data='unsubscribeivent')
        new_markup.add(new_button)
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=new_markup)

    elif data == 'unsubscribeivent':
        new_markup = types.InlineKeyboardMarkup()
        new_button = types.InlineKeyboardButton(text='üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ', callback_data='subscribeivent')
        new_markup.add(new_button)
        #cl = DB.database.Callendar()
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=new_markup)
    
    elif data == 'phonebook':
        pass
    
    elif data == 'menu':
        start(call.message)


@bot.message_handler(func=lambda message: message.reply_to_message is not None)
def reply_to_message_handler(message):
    try:
        number = re.search(r"–ù–æ–º–µ—Ä:(\d+)", message.reply_to_message.text).group(1)
        id = message.reply_to_message.chat.id
        bot.send_message(id, f'–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç!')
        tiket = DB.database.Ticket()
        chatid = tiket.get_tikket(number)
        tiket.close()
        bot.send_message(chatid, f'‚ö†Ô∏è–í–∞–º –ø—Ä–∏—à–µ–ª –æ—Ç–≤–µ—Ç!\n{message.text}')
    except:
        pass


@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    photo = message.photo[-1]
    file_info = bot.get_file(photo.file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    photo = f"img/{photo.file_id}.jpg"
    with open(photo, 'wb') as new_file:
        new_file.write(downloaded_file)
    code = function.read_qr_code(photo)
    if code:
        ac = DB.database.Achievements()
        description = ac.check_code(code)
        if description:
            ac.update_activate(message.from_user.id, code)
            mes = random.choice(['–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ', '–í—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è!', '–ú–æ–ª–æ–¥–µ—Ü!'])
            bot.send_message(message.chat.id, f'–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ! \n{description[0]}\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!\n{mes}')
            ac.close()
            os.remove(photo)
        else:
            bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
            ac.close()
            os.remove(photo)
    else:
        bot.send_message(message.chat.id, '–ö–æ–¥ –æ—Ç—Å—É—Å—Ç–≤—É–µ—Ç –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ!')
        os.remove(photo)