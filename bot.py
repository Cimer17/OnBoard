import telebot
import configparser
import DB.database
import re
import content.TG as tg
from telebot import types


config = configparser.ConfigParser()
config.read("settings.ini")
tokenBot = config["bot"]["bot_token"]


db = DB.database.Database()
bot = telebot.TeleBot(tokenBot)


id_support = '-666276498'  # —Ç—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —á–∞—Ç —Å –≥–ª–∞–≤–Ω—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π


def keyboards_create(ListNameBTN, NumberColumns=2):
    keyboards = types.ReplyKeyboardMarkup(
        row_width=NumberColumns, resize_keyboard=True)
    btn_names = [types.KeyboardButton(text=x) for x in ListNameBTN]
    keyboards.add(*btn_names)
    return keyboards


@bot.message_handler(commands=['start'])
def start(message):
    name = db.check_human(message.chat.id)
    if name is not None:
        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {name}!\n{tg.welcome_message}',
            reply_markup=keyboards_create(tg.welcome_keyboard))
    else:
        bot.send_message(message.chat.id, '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞‚ùó')


@bot.message_handler(func = lambda m : m.text == 'üë§–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å')
def askQuestion(message):
    msg = bot.send_message(message.chat.id, '–ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç–∏–º –≤ –±–∏–ª–∂—ç–∞–π—â–µ–µ –≤—Ä–µ–º—è!\n\
–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:')
    bot.register_next_step_handler(msg, send_Question)


def send_Question(message):
    # –ø–æ–¥–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    people = DB.database.People()
    id = message.from_user.id
    name = people.check('name', id)[0]
    subdivision = people.check('subdivision', id)[0]
    department = people.check('department', id)[0]
    people.close()
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–∏–∫–µ—Ç
    tiket = DB.database.Ticket()
    idtiket = tiket.new_tikket(message.text, message.from_user.id)
    tiket.close()
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    ok = types.InlineKeyboardButton("üü•–í–∑—è—Ç—å –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É", callback_data="takeTicket")
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(ok)
    bot.send_message(id_support, f'–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç: {name} \n–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {subdivision}\n–û—Ç–¥–µ–ª :{department}\n–ù–æ–º–µ—Ä:{idtiket}\n–í–æ–ø—Ä–æ—Å: {message.text}',
    reply_markup=keyboard)
    bot.send_message(message.chat.id, '–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞!')


@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    data = call.data
    if data == 'takeTicket':
        new_markup = types.InlineKeyboardMarkup()
        new_button = types.InlineKeyboardButton(text='‚úÖ–í–∑—è—Ç–æ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É', callback_data='takeTicket')
        new_markup.add(new_button)
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=new_markup)


@bot.message_handler(func=lambda message: message.reply_to_message is not None)
def reply_to_message_handler(message):
    try:
        number = re.search(r"–ù–æ–º–µ—Ä:(\d+)", message.reply_to_message.text).group(1)
        id = message.reply_to_message.chat.id
        bot.send_message(id, f'–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç!')
        tiket = DB.database.Ticket()
        chatid = tiket.get_tikket(number)
        tiket.close()
        bot.send_message(chatid, f'‚ö†Ô∏è–í–∞–º –ø—Ä–∏—à–µ–ª –æ—Ç–≤–µ—Ç!\n{message.text}')
    except:
        pass